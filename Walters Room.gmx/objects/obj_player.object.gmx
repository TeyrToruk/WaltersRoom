<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Verticle variables
grav = 0.5;
vsp = 0;
maxfallspeed = 10;
wallslidespeed = 3;

//Horizontal variables
hsp = 0;
hsp_carry = 0;
acceleration = 1;
deceleration = 0.5;
maxspeed = 5;
wallpush = 20;

//jump variables
jumps = 0;
jumpsmax = 2;
jumpspeed_normal = 10;
jumpspeed_powerup = 13;
jumpspeed_walljump = 13;
jumpspeed = jumpspeed_normal;
leftwallcooldown = 0;
rightwallcooldown = 0;
jumpcooldownlength = 90;

//key press variables
key_down = 0; //must be initialized here becuase its being accessed in other object's step event
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move us to active checkpoint (if there is one)
if(global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset powerup
jumpspeed = jumpspeed_normal;
sprite_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_down = keyboard_check(vk_down);

//React to inputs

//prepare hsp for movement
move = key_left + key_right;
show_debug_message("Move before: "+string(move));
if(move != 0)
{  //If move isn't 0, accelerate in relivant direction
    hsp += move * acceleration;
    
    if(hsp &gt;= maxspeed) // if hsp is bigger than or equal to maxspeed, set hsp to maxspeed
    {
        hsp = maxspeed;
    }
    else if(hsp &lt;= -maxspeed) // if hsp is smaller than or equal to -maxspeed set hsp to -maxspeed
    {
        hsp = -maxspeed;
    }
}
else 
{ //if move is 0, decelerate towards 0 in relevant direction
    //hsp -= sign(hsp) * deceleration;
    if(sign(hsp) == 1)
    {
        hsp = round(hsp*deceleration);
    }
    else if(sign(hsp) == -1)
    {
        hsp = round(hsp*deceleration);
    }
}
show_debug_message("Move: "+string(move));
show_debug_message("Hsp: "+string(hsp));



//Gravity
if (vsp &lt; maxfallspeed) vsp += grav;
//Wall slide (overrides gravity)
if((move != 0) &amp;&amp; (place_meeting(x+sign(move),y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall))) //if we are pressing a key, a wall is next to the key we are pressing, and there is no floor below us
{
    if(sign(vsp) == 1) //Only if VSP is positive (falling player)
    {
        vsp = wallslidespeed;
    }
}

//Jumps
if (place_meeting(x,y+1,obj_wall))
{
   jumps = jumpsmax;
}

if(key_jump) &amp;&amp; (jumps &gt; 0)
{
    jumps -= 1;
    vsp = -jumpspeed;
}

//Wall jump
if(rightwallcooldown != 0) rightwallcooldown--;
if(leftwallcooldown != 0) leftwallcooldown--;

if (key_jump) &amp;&amp; (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall)) //Check jump and wall on right or left
{
    if(!place_meeting(x,y+1,obj_wall)) //Make sure player isn't on floor
    {
        if(place_meeting(x+1,y,obj_wall) &amp;&amp; (rightwallcooldown == 0))
        {
            hsp = -wallpush;
            vsp = -jumpspeed_walljump; //These are down individually so if the wall jump isn't called due to cooldown there is no jump
            rightwallcooldown = jumpcooldownlength;
        }
        else if (place_meeting(x-1,y,obj_wall) &amp;&amp; (leftwallcooldown == 0))
        {
            hsp = wallpush;
            vsp = -jumpspeed_walljump;
            leftwallcooldown = jumpcooldownlength;
        }
    }
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0; //hsp_carry will be re-assigned a value each step if they are on a mov platform

//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
